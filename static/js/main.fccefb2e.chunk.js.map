{"version":3,"sources":["libs/store.ts","components/Audio.tsx","components/Visualizer.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["analyserNode","data","Audio","audioRef","useRef","useEffect","current","volume","ref","className","styles","player","controls","loop","src","onPlay","audioContext","AudioContext","createMediaElementSource","analyser","createAnalyser","connect","destination","fftSize","css","Visualizer","camera","position","fov","aspect","window","innerWidth","innerHeight","near","far","dpr","devicePixelRatio","attach","args","Stats","OrbitControls","intensity","MeshVisualizer","planeRef","canvas","document","createElement","width","height","ctx","getContext","texture","THREE","minFilter","magFilter","useFrame","timeData","Uint8Array","frequencyBinCount","getByteFrequencyData","imageData","getImageData","putImageData","x","length","fillStyle","fillRect","needsUpdate","rotation","Math","PI","wireframe","color","displacementMap","displacementScale","App","container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wNAAaA,EAA8C,CAAEC,KAAM,M,QCItDC,EAAa,WACzB,IAAMC,EAAWC,iBAAyB,MAE1CC,qBAAU,WACTF,EAASG,QAASC,OAAS,MACzB,IAeH,OACC,uBACCC,IAAKL,EACLM,UAAWC,EAAOC,OAClBC,UAAQ,EACRC,MAAI,EAEJC,IAAI,0DACJC,OArBiB,WAClB,IAAKf,EAAaC,KAAM,CACvB,IAAMe,EAAe,IAAIC,aACnBH,EAAME,EAAaE,yBAAyBf,EAASG,SACrDa,EAAWH,EAAaI,iBAC9BN,EAAIO,QAAQF,GACZA,EAASE,QAAQL,EAAaM,aAC9BH,EAASI,QAAU,IACnBvB,EAAaC,KAAOkB,OAkBjBT,EAAS,CACdC,OAAQa,YAAF,2E,uCChCMC,EAAkB,WAC9B,OACC,eAAC,IAAD,CACCC,OAAQ,CACPC,SAAU,CAAC,EAAG,EAAG,IACjBC,IAAK,GACLC,OAAQC,OAAOC,WAAaD,OAAOE,YACnCC,KAAM,GACNC,IAAK,KAENC,IAAKL,OAAOM,iBARb,UAUC,uBAAOC,OAAO,aAAaC,KAAM,CAAC,aAElC,cAACC,EAAA,EAAD,IAEA,cAACC,EAAA,EAAD,CAAeH,OAAO,kBAEtB,8BAAcI,UAAW,IAEzB,cAAC,EAAD,QAKGC,EAAsB,WAC3B,IAAMC,EAAWvC,iBAAmB,MAE9BwC,EAASC,SAASC,cAAc,UACtCF,EAAOG,MAAQ,IACfH,EAAOI,OAAS,IAChB,IAAMC,EAAML,EAAOM,WAAW,MAExBC,EAAU,IAAIC,UAAcR,GAoBlC,OAnBAO,EAAQE,UAAYD,eACpBD,EAAQG,UAAYF,eAEpBG,aAAS,WACR,GAAIvD,EAAaC,KAAM,CACtB,IAAIuD,EAAW,IAAIC,WAAWzD,EAAaC,KAAKyD,mBAChD1D,EAAaC,KAAK0D,qBAAqBH,GAEvC,IAAMI,EAAYX,EAAIY,aAAa,EAAG,EAAG,IAAK,KAC9CZ,EAAIa,aAAaF,EAAW,EAAG,EAAG,EAAG,EAAG,IAAK,KAC7C,IAAK,IAAIG,EAAI,EAAGA,EAAIP,EAASQ,OAAQD,IACpCd,EAAIgB,UAAJ,cAAuBT,EAASO,GAAhC,aAAuCP,EAASO,GAAhD,aAAuDP,EAASO,GAAhE,KACAd,EAAIiB,SAASH,EAAG,IAAK,EAAG,GAGzBZ,EAAQgB,aAAc,MAKvB,cAAC,IAAD,CAAO3D,IAAKmC,EAAUyB,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAAIhC,KAAM,CAAC,GAAI,GAAI,IAAK,KAA1E,SACC,mCAAmBiC,WAAS,EAACC,MAAM,OAAOC,gBAAiBtB,EAASuB,kBAAmB,QCxD7EC,EAAW,WACvB,OACC,sBAAKlE,UAAWC,EAAOkE,UAAvB,UACC,cAAC,EAAD,IACA,cAAC,EAAD,QAKGlE,EAAS,CACdkE,UAAWpD,YAAF,2KCDKqD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAED3C,SAAS4C,eAAe,SAMzBZ,M","file":"static/js/main.fccefb2e.chunk.js","sourcesContent":["export const analyserNode: { data: AnalyserNode | null } = { data: null }\r\n","import React, { useEffect, useRef, VFC } from 'react';\r\nimport { css } from '@emotion/css';\r\nimport { analyserNode } from '../libs/store';\r\n\r\nexport const Audio: VFC = () => {\r\n\tconst audioRef = useRef<HTMLAudioElement>(null)\r\n\r\n\tuseEffect(() => {\r\n\t\taudioRef.current!.volume = 0.05\r\n\t}, [])\r\n\r\n\tconst handlePlay = () => {\r\n\t\tif (!analyserNode.data) {\r\n\t\t\tconst audioContext = new AudioContext()\r\n\t\t\tconst src = audioContext.createMediaElementSource(audioRef.current!)\r\n\t\t\tconst analyser = audioContext.createAnalyser()\r\n\t\t\tsrc.connect(analyser)\r\n\t\t\tanalyser.connect(audioContext.destination)\r\n\t\t\tanalyser.fftSize = 512\r\n\t\t\tanalyserNode.data = analyser\r\n\t\t\t// console.log('set analyser')\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<audio\r\n\t\t\tref={audioRef}\r\n\t\t\tclassName={styles.player}\r\n\t\t\tcontrols\r\n\t\t\tloop\r\n\t\t\t// src=\"./assets/Ghost - Potato Chips.mp3\"\r\n\t\t\tsrc=\"./assets/たぬきちの冒険.mp3\"\r\n\t\t\tonPlay={handlePlay}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nconst styles = {\r\n\tplayer: css`\r\n\t\tposition: absolute;\r\n\t\tbottom: 20px;\r\n\t`\r\n}\r\n","import React, { useRef, VFC } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls, Plane, Stats } from '@react-three/drei';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { analyserNode } from '../libs/store';\r\n\r\nexport const Visualizer: VFC = () => {\r\n\treturn (\r\n\t\t<Canvas\r\n\t\t\tcamera={{\r\n\t\t\t\tposition: [0, 3, 15],\r\n\t\t\t\tfov: 50,\r\n\t\t\t\taspect: window.innerWidth / window.innerHeight,\r\n\t\t\t\tnear: 0.1,\r\n\t\t\t\tfar: 2000\r\n\t\t\t}}\r\n\t\t\tdpr={window.devicePixelRatio}>\r\n\t\t\t{/* canvas color */}\r\n\t\t\t<color attach=\"background\" args={['#1e1e1e']} />\r\n\t\t\t{/* fps */}\r\n\t\t\t<Stats />\r\n\t\t\t{/* camera controller */}\r\n\t\t\t<OrbitControls attach=\"orbitControls\" />\r\n\t\t\t{/* lights */}\r\n\t\t\t<ambientLight intensity={1} />\r\n\t\t\t{/* objects */}\r\n\t\t\t<MeshVisualizer />\r\n\t\t</Canvas>\r\n\t)\r\n}\r\n\r\nconst MeshVisualizer: VFC = () => {\r\n\tconst planeRef = useRef<THREE.Mesh>(null)\r\n\r\n\tconst canvas = document.createElement('canvas') as HTMLCanvasElement\r\n\tcanvas.width = 256\r\n\tcanvas.height = 512\r\n\tconst ctx = canvas.getContext('2d')!\r\n\r\n\tconst texture = new THREE.Texture(canvas)\r\n\ttexture.minFilter = THREE.LinearFilter\r\n\ttexture.magFilter = THREE.LinearFilter\r\n\r\n\tuseFrame(() => {\r\n\t\tif (analyserNode.data) {\r\n\t\t\tlet timeData = new Uint8Array(analyserNode.data.frequencyBinCount)\r\n\t\t\tanalyserNode.data.getByteFrequencyData(timeData)\r\n\r\n\t\t\tconst imageData = ctx.getImageData(0, 1, 256, 511)\r\n\t\t\tctx.putImageData(imageData, 0, 0, 0, 0, 256, 512)\r\n\t\t\tfor (let x = 0; x < timeData.length; x++) {\r\n\t\t\t\tctx.fillStyle = `rgb(${timeData[x]}, ${timeData[x]}, ${timeData[x]})`\r\n\t\t\t\tctx.fillRect(x, 510, 2, 2)\r\n\t\t\t}\r\n\r\n\t\t\ttexture.needsUpdate = true\r\n\t\t}\r\n\t})\r\n\r\n\treturn (\r\n\t\t<Plane ref={planeRef} rotation={[-Math.PI / 2, 0, 0]} args={[20, 20, 256, 256]}>\r\n\t\t\t<meshPhongMaterial wireframe color=\"#0f0\" displacementMap={texture} displacementScale={10} />\r\n\t\t</Plane>\r\n\t)\r\n}\r\n","import React, { VFC } from 'react';\nimport { css } from '@emotion/css';\nimport { Audio } from './Audio';\nimport { Visualizer } from './Visualizer';\n\nexport const App: VFC = () => {\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t<Visualizer />\n\t\t\t<Audio />\n\t\t</div>\n\t)\n}\n\nconst styles = {\n\tcontainer: css`\n\t\tposition: relative;\n\t\twidth: 100vw;\n\t\theight: 100vh;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t`\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}